/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;
import java.util.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 
    Stack<Integer> stack=new Stack<Integer>();
        
    AbstractSymbol firstTerm;
    
    int adjust_lineno(int prev_line){
        int cl = curr_lineno();
        return ( cl != prev_line ) ?  (cl-1) : cl;
    }
    
    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal Program program;
nonterminal Classes class_list;
nonterminal Class_ class;
nonterminal Features dummy_feature_list;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals dummy_formal_list;
nonterminal Formals formal_list;
nonterminal Formal formal;
nonterminal AbstractSymbol inherits;
nonterminal Expression optional_assign;
nonterminal Expression expr;
nonterminal Expression let_body;
nonterminal Expression object_factor;
nonterminal Expressions dummy_param_list;
nonterminal Expressions param_list;
nonterminal Expressions expr_list;
nonterminal Expressions multiplecase_list;
nonterminal Expressions multiplecase_branch;
nonterminal Cases case_list;
nonterminal Case case;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;




program	
	::= {: stack.push(curr_lineno()); :} class_list:cl
	    {: RESULT = new programc(stack.pop(), cl); :}
        ;

class_list
	/* single class */
	::= class:c SEMI
	    {: RESULT = (new Classes(c.getLineNumber())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c SEMI
	    {: RESULT = cl.appendElement(c); :}
        | error class_list:cl SEMI
                {: RESULT = cl; :}
        | error SEMI
                {: RESULT = new Classes(curr_lineno()); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= {: stack.push(curr_lineno()); :} CLASS TYPEID:n inherits:p  LBRACE dummy_feature_list:f RBRACE
	    {: RESULT = new class_c(stack.pop(), n, p, f, curr_filename()); :}
	;

inherits
    ::= /* vuoto */
        {: RESULT = AbstractTable.idtable.addString("Object"); :}
    | INHERITS TYPEID:p
        {: RESULT = p; :}
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	| feature_list:fl
		{: RESULT = fl; :}
	;

feature_list
	::= {: stack.push(curr_lineno()); :} feature:f SEMI
		{: RESULT = new Features(f.getLineNumber()).appendElement(f); :}
	| feature_list:fl {: stack.push(curr_lineno()); :} feature:f SEMI
		{: RESULT = fl.appendElement(f); :}
        | feature_list:fl error SEMI
                {: RESULT = fl; :}
        | error SEMI
                {: RESULT = new Features(curr_lineno()); :}
	;

feature
	::= OBJECTID:o LPAREN dummy_formal_list:fl RPAREN COLON TYPEID:t LBRACE expr:e RBRACE
		{: RESULT = new method(stack.pop(), o, fl, t, e); :}
	|  OBJECTID:o COLON TYPEID:t optional_assign:e
		{: RESULT = new attr(stack.pop(), o, t, e); :}
	;
	
dummy_formal_list
	::= /* vuoto */
		{: RESULT = new Formals(curr_lineno()); :}
	| formal_list:fl
		{: RESULT = fl; :}
	;

formal_list
	::= formal:f
		{: RESULT = new Formals(f.getLineNumber()).appendElement(f); :}
	| formal_list:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
        | formal_list:fl COMMA error
                {: RESULT = fl; :}
        | error
                {: RESULT = new Formals(curr_lineno()); :}
	;

formal
	::= {: stack.push(curr_lineno()); :} OBJECTID:o  COLON TYPEID:t
		{: RESULT = new formalc(stack.pop(), o, t); :}
	;

expr
	::= {: stack.push(curr_lineno()); :} object_factor:of
        {: RESULT = of; :}

	| {: stack.push(curr_lineno()); :} IF expr:pred THEN expr:then_expr ELSE expr:else_expr FI
		{: RESULT = new cond(stack.pop(), pred, then_expr, else_expr); :}

	| {: stack.push(curr_lineno()); :} WHILE expr:pred LOOP expr:body POOL
		{: RESULT = new loop(stack.pop(), pred, body); :}

	| {: stack.push(curr_lineno()); :} LBRACE expr_list:el RBRACE
		{: RESULT = new block(stack.pop(), el); :}
	
	| LET {: stack.push(curr_lineno()); :} OBJECTID:o COLON TYPEID:t optional_assign:init let_body:body
		{: RESULT = new let(stack.pop(), o, t, init, body); :}

	| {: stack.push(curr_lineno()); :} CASE expr:e OF case_list:cl ESAC
		{: RESULT = new typcase(stack.pop(), e, cl); :}

	| {: stack.push(curr_lineno()); :} NEW TYPEID:t
		{: RESULT = new new_(stack.pop(), t); :}

	| {: stack.push(curr_lineno()); :} ISVOID expr:e
		{: RESULT = new isvoid(stack.pop(), e); :}

	| {: stack.push(curr_lineno()); :} NEG expr:e
		{: RESULT = new neg(stack.pop(), e); :}
	
	| expr:a  LT {: stack.push(curr_lineno()); :} expr:b
		{: RESULT = new lt(stack.pop(), a, b); :}

	| expr:a  LE {: stack.push(curr_lineno()); :} expr:b
		{: RESULT = new leq(stack.pop(), a, b); :}

	| expr:a  EQ {: stack.push(curr_lineno()); :} expr:b
		{: RESULT = new eq(stack.pop(), a, b); :}
                        
        | expr:e  DOT {: stack.push(curr_lineno()); :} OBJECTID:o  LPAREN dummy_param_list:pl RPAREN
		{: RESULT = new dispatch(stack.pop(), e, o, pl); :}

	| expr:e AT TYPEID:t {: stack.push(curr_lineno()); :} DOT OBJECTID:o  LPAREN dummy_param_list:pl RPAREN
		{: RESULT = new static_dispatch(stack.pop(), e, t, o, pl); :}
	
	| expr:a  PLUS {: stack.push(curr_lineno()); :} expr:b
		{: RESULT = new plus(stack.pop(), a, b); :}

	| expr:a  MINUS {: stack.push(curr_lineno()); :} expr:b
		{: RESULT = new sub(stack.pop(), a, b); :}
	
	| expr:a  MULT {: stack.push(curr_lineno()); :} expr:b
		{: RESULT = new mul(stack.pop(), a, b); :}

	| expr:a  DIV {: stack.push(curr_lineno()); :} expr:b
		{: RESULT = new divide(stack.pop(), a, b); :}
                
	| {: stack.push(curr_lineno()); :} NOT expr:e
		{: RESULT = new comp(stack.pop(), e); :}

	| LPAREN expr:e RPAREN
		{: RESULT = e; :}

	| {: stack.push(curr_lineno()); :} INT_CONST:i
		{: RESULT = new int_const(stack.pop(), i); :}

	| {: stack.push(curr_lineno()); :} STR_CONST:s
		{: RESULT = new string_const(stack.pop(), s); :}

	| {: stack.push(curr_lineno()); :} BOOL_CONST:b
		{: RESULT = new bool_const(stack.pop(), b); :}
        | LET error let_body:lb
                {: RESULT = lb; :}
        
        | {: stack.push(curr_lineno()); :} 
                AT OBJECTID:o LOOP multiplecase_list:ml ESAC COLON expr:e
                {:
                        Enumeration branches = ml.getElements();
                        cond toReturn = null, prev = null, curr = null;
                        
                        while(branches.hasMoreElements()){
                                Expressions b = (Expressions)branches.nextElement();
                                Expression intero = (Expression)b.getNth(0);
                                Expression obj = new object(intero.getLineNumber(), o);
                                Expression action = (Expression)b.getNth(1);
                                Expression pred = new eq(b.getLineNumber(), obj, intero);
                                curr = new cond(pred.getLineNumber(), pred, action, new no_expr(0));
                                if(prev != null)
                                        prev.else_exp = curr;
                                else
                                        toReturn = curr;
                                prev = curr;
                        }
                        
                        curr.else_exp = e;
                        RESULT = toReturn;
                :}

	;

object_factor
    ::= OBJECTID:o ASSIGN expr:e
		{: RESULT = new assign(stack.pop(), o, e); :}

	| OBJECTID:o LPAREN dummy_param_list:pl RPAREN
		{: RESULT = new dispatch(stack.peek(), new object(stack.pop(), 
					AbstractTable.idtable.addString("self")), o, pl); :}
        | OBJECTID:o
		{: RESULT = new object(stack.pop(), o); :}
         ;


dummy_param_list
	::= /*vuoto */
		{: RESULT = new Expressions(curr_lineno()); :}
	| param_list:pl
		{: RESULT = pl; :}
	;


param_list
	::= {: stack.push(curr_lineno()); :} expr:e
		{: RESULT = new Expressions(stack.pop()).appendElement(e); :}
	| param_list:pl COMMA expr:e
		{: RESULT = pl.appendElement(e); :}
        | param_list:pl error
                {: RESULT = pl; :}
	;

expr_list
	::= {: stack.push(curr_lineno()); :}  expr:e SEMI
		{: RESULT = new Expressions(stack.pop()).appendElement(e); :}
	| expr_list:el expr:e SEMI
		{: RESULT = el.appendElement(e); :}
        | error SEMI
                {: RESULT = new Expressions(curr_lineno()); :}
        | expr_list:el error SEMI
                {: RESULT = el; :}
	;

let_body
	::= IN expr:e
		{: RESULT = e; :}
	|  COMMA {: stack.push(curr_lineno()); :} OBJECTID:o COLON TYPEID:t optional_assign:init let_body:body
		{: RESULT = new let(stack.pop(), o, t, init, body); :}
        | COMMA error let_body:lb
                {: RESULT = lb; :}
	;

case_list
	::= {: stack.push(curr_lineno()); :} case:c SEMI
		{: RESULT = new Cases(stack.pop()).appendElement(c); :}
	| case_list:cl case:c SEMI
		{: RESULT = cl.appendElement(c); :}
        | error case_list:cl  SEMI
                {: RESULT = cl; :}
        | error SEMI
                {: RESULT = new Cases(curr_lineno()); :}
	;

case
	::= {: stack.push(curr_lineno()); :} OBJECTID:o COLON TYPEID:t DARROW expr:e
		{: RESULT = new branch(stack.pop(), o, t, e); :}
	; 


multiplecase_list
        ::= {: stack.push(curr_lineno()); :} multiplecase_branch:mb SEMI
                {: RESULT = new Expressions(stack.pop()).appendElement(mb); :}
        |   multiplecase_list:ml multiplecase_branch:mb SEMI
                {: RESULT = ml.appendElement(mb); :}
        ;
        
multiplecase_branch
        ::= {: stack.push(curr_lineno()); :} INT_CONST:i COLON expr:e
                {: 
                        Expression intero = new int_const(stack.peek(), i);
                        RESULT = new Expressions(stack.pop()).appendElement(intero).appendElement(e); 
                :}
        ;


optional_assign
	::= /* vuoto */
		{: RESULT = new no_expr(0); :}
	| ASSIGN expr:e
		{: RESULT = e; :}
	;

