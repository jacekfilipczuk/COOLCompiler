/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;
import java.util.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 
    Stack<Integer> stack=new Stack<Integer>();
    int curr_lineno() {
    return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
    return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
    String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
                 ": parse error at or near ");
        Utilities.printToken(cur_token);
    omerrs++;
    if (omerrs>50) {
       System.err.println("More than 50 errors");
       System.exit(1);
    }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal Program program;
nonterminal Classes class_list;
nonterminal Class_ class;
nonterminal Features dummy_feature_list;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal AbstractSymbol inherits;
nonterminal Formals dummy_formal_list;
nonterminal Formals formal_list;
nonterminal Formal formal;
nonterminal Expressions dummy_param_list;
nonterminal Expressions argument_list;
nonterminal Expressions expression_list;
nonterminal Expression optional_assign;
nonterminal Expression object_factor;
nonterminal Expression let_followon;
nonterminal Expression expression;
nonterminal Cases case_list;
nonterminal Case case_clause;




/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LT, LE, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;
precedence left error;

start with program;

program    
    ::=  {: stack.push(curr_lineno()); :} class_list:cl 
        {: RESULT = new programc(stack.pop(), cl); :}
    
    ;

class_list
	/*singel class*/
    ::=  {: stack.push(curr_lineno()); :} class:c SEMI
        {: RESULT = (new Classes(stack.pop())).appendElement(c); :}
    | error SEMI
    	{: RESULT = new Classes(curr_lineno()); :} 
	/*several classes*/
    | class_list:cl class:c SEMI
        {: RESULT = cl.appendElement(c); :}
     
    | class_list:cl error SEMI
    	{: RESULT = cl; :}
    ;

/* costruttore di classe */
class
    ::= {: stack.push(curr_lineno()); :} CLASS TYPEID:n inherits:p LBRACE dummy_feature_list:f RBRACE 
        {: RESULT = new class_c(stack.pop(), n, p, f, curr_filename()); :}
  
    ;

/* parametri ereditati */
inherits
    ::= /* vuoto */
                {: RESULT = AbstractTable.idtable.addString("Object"); :}
        | INHERITS TYPEID:p
                {: RESULT = p; :}
	;

/* lista di feature, pu√≤ essere vuota */
dummy_feature_list
    ::= /* vuoto */
		{: RESULT = new Features(curr_lineno()); :} 
	| feature_list:fl 
		{: RESULT = fl; :}
	;

/* lista di feature */
feature_list
    ::= {: stack.push(curr_lineno()); :} feature:f  SEMI
		{: RESULT = new Features(stack.pop()).appendElement(f); :}
    | feature_list:fl feature:f SEMI
        	{: RESULT = fl.appendElement(f); :}
    
    | feature_list:fl error SEMI
		{: RESULT = fl; :}
    ;

/* feature, metodo o attributo */
feature
	::= OBJECTID:name {: stack.push(curr_lineno()); :} LPAREN dummy_formal_list:formals RPAREN COLON TYPEID:return_type LBRACE expression:expr RBRACE
        	{: RESULT = new method(stack.pop(), name, formals, return_type, expr); :}
	| OBJECTID:name {: stack.push(curr_lineno()); :} COLON TYPEID:type_decl optional_assign:oa
        	{: RESULT = new attr(stack.pop(), name, type_decl, oa); :}
	;


optional_assign
    ::= /* vuoto */
		{: RESULT = new no_expr(0); :}
	| ASSIGN expression:e
		{: RESULT = e; :}
	;
dummy_formal_list
    ::= /* vuoto */
             	{: RESULT = new Formals(curr_lineno()); :} 
	| formal_list:fl
		{: RESULT = fl; :}
	;

formal_list
    ::=  {: stack.push(curr_lineno()); :} formal:f
        {: RESULT = (new Formals(stack.pop())).appendElement(f); :}
    | formal_list:fl COMMA formal:f
        {: RESULT = fl.appendElement(f); :}
    | formal_list:fl COMMA error
		{: RESULT = fl; :}
    ;

formal
    ::= OBJECTID:name COLON TYPEID:type_decl
        {: RESULT = new formalc(curr_lineno(), name, type_decl); :}  
    ;

/* corpo del costrutto let */
let_followon
    ::= IN expression:body
        	{: RESULT = body; :}
    
    | COMMA  {: stack.push(curr_lineno()); :} OBJECTID:identifier COLON TYPEID:type_decl optional_assign:init let_followon:body
        	{: RESULT = new let(stack.pop(), identifier, type_decl, init, body); :}
    | error let_followon:body
		{: RESULT = body; :}
    ;

/* corpo del costrutto case */
case_list
    ::= {: stack.push(curr_lineno()); :} case_clause:c SEMI
        {: RESULT = (new Cases(stack.pop())).appendElement(c); :}
    | {: stack.push(curr_lineno()); :} error SEMI
	{: RESULT = new Cases(stack.pop()); :}  /*************************/
    | case_list:cl case_clause:c SEMI
        {: RESULT = cl.appendElement(c); :}
    | case_list:cl error SEMI
                {: RESULT = cl; :}
    ;

case_clause
    ::= {: stack.push(curr_lineno()); :} OBJECTID:name COLON TYPEID:type_decl DARROW expression:expr
        {: RESULT = new branch(stack.pop(), name, type_decl, expr); :}
    ;

/* lista di espressioni */
expression_list
    ::= expression:e SEMI
        	{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
    | error SEMI
        	{: RESULT = new Expressions(curr_lineno()); :}
    | expression_list:el expression:e SEMI
        	{: RESULT = el.appendElement(e); :}
    | expression_list:el error SEMI
                {: RESULT = el; :}
    ;

expression
    ::= {: stack.push(curr_lineno()); :} object_factor:of
                {: RESULT = of; :}
    
    | {: stack.push(curr_lineno()); :} IF expression:pred THEN expression:then_exp ELSE expression:else_exp FI
        {: RESULT = new cond(stack.pop(), pred, then_exp, else_exp); :}
    
    | {: stack.push(curr_lineno()); :} WHILE expression:pred LOOP expression:body POOL
        {: RESULT = new loop(stack.pop(), pred, body); :}

    | {: stack.push(curr_lineno()); :} LBRACE expression_list:body RBRACE
        {: RESULT = new block(stack.pop(), body); :}
    
    | LET {: stack.push(curr_lineno()); :} OBJECTID:identifier COLON TYPEID:type_decl optional_assign:init let_followon:body
        {: RESULT = new let(stack.pop(), identifier, type_decl, init, body); :}
    
    | {: stack.push(curr_lineno()); :} CASE expression:expr OF case_list:cases ESAC
        {: RESULT = new typcase(stack.pop(), expr, cases); :}

    | expression:expr AT {: stack.push(curr_lineno()); :} TYPEID:type_name DOT OBJECTID:name LPAREN dummy_param_list:actual RPAREN
        {: RESULT = new static_dispatch(stack.pop(), expr, type_name, name, actual); :}

    | expression:expr DOT OBJECTID:name LPAREN dummy_param_list:actual RPAREN
        {: RESULT = new dispatch(expr.getLineNumber(), expr, name, actual); :}
    
    | {: stack.push(curr_lineno()); :} NEW TYPEID:type_name
        {: RESULT = new new_(stack.pop(), type_name); :}
    
    | {: stack.push(curr_lineno()); :} ISVOID expression:e1
        {: RESULT = new isvoid(stack.pop(), e1); :}
    
    | expression:e1 PLUS {: stack.push(curr_lineno()); :} expression:e2
        {: RESULT = new plus(stack.pop(), e1, e2); :}
    
    | expression:e1 MINUS {: stack.push(curr_lineno()); :} expression:e2
        {: RESULT = new sub(stack.pop(), e1, e2); :}
    
    | expression:e1 MULT {: stack.push(curr_lineno()); :} expression:e2
        {: RESULT = new mul(stack.pop(), e1, e2); :}
    
    | expression:e1 DIV {: stack.push(curr_lineno()); :} expression:e2
        {: RESULT = new divide(stack.pop(), e1, e2); :}
    
    | {: stack.push(curr_lineno()); :} NOT expression:e1
        {: RESULT = new comp(stack.pop(), e1); :}
    
    | expression:e1 LT {: stack.push(curr_lineno()); :} expression:e2
        {: RESULT = new lt(stack.pop(), e1, e2); :}
    
    | expression:e1 LE {: stack.push(curr_lineno()); :} expression:e2
        {: RESULT = new leq(stack.pop(), e1, e2); :}
    
    | expression:e1 EQ {: stack.push(curr_lineno()); :} expression:e2
        {: RESULT = new eq(stack.pop(), e1, e2); :}
    
    | {: stack.push(curr_lineno()); :} NEG expression:e1
        {: RESULT = new neg(stack.pop(), e1); :}
    
    | LPAREN expression:expr RPAREN
        {: RESULT = expr; :}
    
    | {: stack.push(curr_lineno()); :} INT_CONST:token
        {: RESULT = new int_const(stack.pop(), token); :}
    
    | {: stack.push(curr_lineno()); :} STR_CONST:token
        {: RESULT = new string_const(stack.pop(), token); :}
    
    | {: stack.push(curr_lineno()); :} BOOL_CONST:val
        {: RESULT = new bool_const(stack.pop(), val); :}
    | error expression:expr
	{: RESULT = expr; :}

/******* MODIFICA ***********/
    | {: stack.push(curr_lineno()); :}LET_STMT argument_list:applist AT expression:expr in INT_CONST:token
	{: Enumeration functions = applist.getElements();
	   Expression toreturn = new dispatch(stack.peek(),"APPLY",expr.toString(),expr);
	   while(functions.hasMoreElements()){
		Expressions func = (Expressions)functions.nextElement();
		toreturn = new dispatch(stack.peek(),"APPLY",func.toString(),toreturn);
	   }
	   RESULT = new assign(stack.pop(),token,toreturn);
	 :}
    ;

object_factor
        ::= OBJECTID:name ASSIGN expression:expr
		{: RESULT = new assign(stack.pop(), name, expr); :}
	| OBJECTID:name LPAREN dummy_param_list:actual RPAREN
        	{: RESULT = new dispatch(stack.peek(), new object(stack.pop(), AbstractTable.idtable.addString("self")), name, actual); :}

        | OBJECTID:name
		{: RESULT = new object(stack.pop(), name); :}
        
        ;


dummy_param_list
	::= /*vuoto */
		{: RESULT = new Expressions(curr_lineno()); :}

	| argument_list:pl
		{: RESULT = pl; :}
	;

argument_list
    ::=  expression:a
        {: RESULT = (new Expressions(curr_lineno())).appendElement(a); :}
    
    | argument_list:al COMMA expression:a
        {: RESULT = al.appendElement(a); :}
    ;

